insulate('onarum', function()
  insulate('when package found', function()
    it('should bundle file', function()
      _G.arg = { 'spec/fixtures/package.lua' }
      local actual = require('onarum')
      local bundle = io.open('spec/fixtures/bundle.lua')
      local expect = bundle:read('*a')
      bundle:close()
      assert.is_equal(expect, actual)
    end)
  end)

  insulate('when package not found', function()
    it('should throw error', function()
      assert.is_error(function()
        require('onarum')
      end)
    end)
  end)

  insulate('when base found', function()
    it('should bundle file without base', function()
      _G.arg = { 'spec/fixtures/package.lua', './spec/fixtures/' }
      local actual = require('onarum')
      local bundle = io.open('spec/fixtures/bundle-base.lua')
      local expect = bundle:read('*a')
      bundle:close()
      assert.is_equal(expect, actual)
    end)
  end)

  insulate('when module not found', function()
    it('should throw error', function()
      _G.arg = { 'spec/fixtures/not-found.lua' }
      assert.is_error(function()
        require('onarum')
      end)
    end)
  end)

  insulate('when circular referrence', function()
    it('should throw error', function()
      _G.arg = { 'spec/fixtures/circular-referrence.lua' }
      assert.is_error(function()
        require('onarum')
      end)
    end)
  end)
end)
